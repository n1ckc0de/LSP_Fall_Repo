// Step 1: Create Class ShapeRenderer.java //

package org.howard.edu.lsp.finalexam.question3;

public class ShapeRenderer {
    private ShapeFactory shapeFactory;

    public ShapeRenderer() {
        this.shapeFactory = ShapeFactory.getInstance(); // Use the factory to create shapes
    }

    public void renderShape(String shapeType) {
        Shape shape = shapeFactory.createShape(shapeType);
        if (shape != null) {
            shape.draw();
        } else {
            System.out.println("Unknown shape type: " + shapeType);
        }
    }

    public static void main(String[] args) {
        ShapeRenderer renderer = new ShapeRenderer();

        // Render different shapes
        renderer.renderShape("circle");    // Output: Drawing a Circle
        renderer.renderShape("rectangle"); // Output: Drawing a Rectangle
        renderer.renderShape("triangle");  // Output: Drawing a Triangle
        renderer.renderShape("hexagon");   // Output: Unknown shape type: hexagon  
    }
}


// Step 2: Create New Class ShapeFactory.java //

package org.howard.edu.lsp.finalexam.question3;

public class ShapeFactory {
    private static ShapeFactory instance;

    // Private constructor to prevent instantiation
    private ShapeFactory() {}

    // Singleton pattern to ensure only one instance of ShapeFactory
    public static ShapeFactory getInstance() {
        if (instance == null) {
            instance = new ShapeFactory();
        }
        return instance;
    }

    // Factory method to create shapes based on type
    public Shape createShape(String shapeType) {
        if (shapeType.equalsIgnoreCase("circle")) {
            return new Circle();
        } else if (shapeType.equalsIgnoreCase("rectangle")) {
            return new Rectangle();
        } else if (shapeType.equalsIgnoreCase("triangle")) {
            return new Triangle();
        }
        return null; // Return null if the shape type is unknown
    }
}



// Step 3: Create Interface Shape.java //

package org.howard.edu.lsp.finalexam.question3;

public interface Shape {
    void draw();
}


// Step 4: Create Class Circle.java //

package org.howard.edu.lsp.finalexam.question3;

public class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}


// Step 5: Create Class Rectangle.java //

package org.howard.edu.lsp.finalexam.question3;

public class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Rectangle");
    }
}

// Step 6: Create Class Triangle.java //

package org.howard.edu.lsp.finalexam.question3;

public class Triangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Triangle");
    }
}


// Step 7: Create JUnit Test Class ShapeRendererTest.java //


package org.howard.edu.lsp.finalexam.question3;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class ShapeRendererTest {

    @Test
    public void testRenderCircle() {
        ShapeRenderer renderer = new ShapeRenderer();
        renderer.renderShape("circle"); // Expected output: Drawing a Circle
    }

    @Test
    public void testRenderRectangle() {
        ShapeRenderer renderer = new ShapeRenderer();
        renderer.renderShape("rectangle"); // Expected output: Drawing a Rectangle
    }

    @Test
    public void testRenderTriangle() {
        ShapeRenderer renderer = new ShapeRenderer();
        renderer.renderShape("triangle"); // Expected output: Drawing a Triangle
    }

    @Test
    public void testRenderUnknownShape() {
        ShapeRenderer renderer = new ShapeRenderer();
        renderer.renderShape("hexagon"); // Expected output: Unknown shape type: hexagon
    }
}


// Step 8: Run the JUnit Test on ShapeRendererTest.java //


