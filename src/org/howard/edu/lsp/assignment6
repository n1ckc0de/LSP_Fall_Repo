/// JUnit test cases for assignment 6 ///

package org.howard.edu.assignment6;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class IntegerSetTest {
    private IntegerSet set1;
    private IntegerSet set2;

    @BeforeEach
    public void setUp() {
        set1 = new IntegerSet();
        set2 = new IntegerSet();
    }

    @Test
    @DisplayName("Test case for clear method")
    public void testClear() {
        set1.add(1);
        set1.clear();
        assertTrue(set1.isEmpty(), "Set should be empty after clear()");
    }

    @Test
    @DisplayName("Test case for length method")
    public void testLength() {
        assertEquals(0, set1.length(), "Length of empty set should be 0");
        set1.add(1);
        assertEquals(1, set1.length(), "Length should be 1 after adding an element");
    }

    @Test
    @DisplayName("Test case for equals method")
    public void testEquals() {
        set1.add(1);
        set1.add(2);
        set2.add(2);
        set2.add(1);
        assertTrue(set1.equals(set2), "Sets should be equal with same elements in any order");

        set2.add(3);
        assertFalse(set1.equals(set2), "Sets should not be equal if they have different elements");
    }

    @Test
    @DisplayName("Test case for contains method")
    public void testContains() {
        set1.add(1);
        assertTrue(set1.contains(1), "Set should contain added element");
        assertFalse(set1.contains(2), "Set should not contain element not added");
    }

    @Test
    @DisplayName("Test case for largest method")
    public void testLargest() {
        set1.add(3);
        set1.add(1);
        set1.add(2);
        assertEquals(3, set1.largest(), "Largest element should be 3");

        set1.clear();
        assertThrows(IllegalStateException.class, () -> set1.largest(), "Should throw exception when set is empty");
    }

    @Test
    @DisplayName("Test case for smallest method")
    public void testSmallest() {
        set1.add(3);
        set1.add(1);
        set1.add(2);
        assertEquals(1, set1.smallest(), "Smallest element should be 1");

        set1.clear();
        assertThrows(IllegalStateException.class, () -> set1.smallest(), "Should throw exception when set is empty");
    }

    @Test
    @DisplayName("Test case for add method")
    public void testAdd() {
        set1.add(1);
        set1.add(1); // Add duplicate
        assertEquals(1, set1.length(), "Set should ignore duplicate elements");
    }

    @Test
    @DisplayName("Test case for remove method")
    public void testRemove() {
        set1.add(1);
        set1.remove(1);
        assertFalse(set1.contains(1), "Element should be removed from the set");

        set1.remove(2); // Removing non-existent element
        assertEquals(0, set1.length(), "Removing non-existent element should not change set size");
    }

    @Test
    @DisplayName("Test case for union method")
    public void testUnion() {
        set1.add(1);
        set2.add(2);
        set1.union(set2);
        assertTrue(set1.contains(1) && set1.contains(2), "Union should combine elements from both sets");
    }

    @Test
    @DisplayName("Test case for intersect method")
    public void testIntersect() {
        set1.add(1);
        set1.add(2);
        set2.add(2);
        set2.add(3);
        set1.intersect(set2);
        assertTrue(set1.contains(2) && set1.length() == 1, "Intersection should retain only common elements");
    }

    @Test
    @DisplayName("Test case for diff method")
    public void testDiff() {
        set1.add(1);
        set1.add(2);
        set2.add(2);
        set1.diff(set2);
        assertTrue(set1.contains(1) && set1.length() == 1, "Difference should remove elements present in other set");
    }

    @Test
    @DisplayName("Test case for complement method")
    public void testComplement() {
        set1.add(1);
        set2.add(1);
        set2.add(2);
        set2.add(3);
        set1.complement(set2);
        assertFalse(set1.contains(1), "Complement should remove elements present in both sets");
        assertTrue(set1.contains(2) && set1.contains(3), "Complement should keep elements not present in the set");
    }

    @Test
    @DisplayName("Test case for isEmpty method")
    public void testIsEmpty() {
        assertTrue(set1.isEmpty(), "Set should initially be empty");
        set1.add(1);
        assertFalse(set1.isEmpty(), "Set should not be empty after adding an element");
    }

    @Test
    @DisplayName("Test case for toString method")
    public void testToString() {
        set1.add(1);
        set1.add(2);
        assertEquals("Set: [1, 2]", set1.toString(), "toString should return formatted string of set contents");
    }
}
